import axios from "axios";

// T·∫°o instance axios
const instance = axios.create({
  baseURL: "http://localhost:5000/api",
});

// Request interceptor
instance.interceptors.request.use(
  async (config) => {
    // Lu√¥n l·∫•y token m·ªõi nh·∫•t tr∆∞·ªõc m·ªói request
    const token = localStorage.getItem("token");
    console.log("üîê Axios request interceptor - token t·ª´ localStorage:", token);

    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log("‚úÖ Axios request - ƒë√£ g·∫Øn Authorization header:", config.headers.Authorization);
    } else {
      console.log("‚ùå Axios request - kh√¥ng c√≥ token trong localStorage");
    }

    return config;
  },
  (error) => {
    console.error("‚ùå Axios request interceptor error:", error);
    return Promise.reject(error);
  }
);

// Response interceptor
// src/services/axios.js (thay ph·∫ßn response interceptor)
instance.interceptors.response.use(
  (response) => {
    // optional debug
    // console.log("‚úÖ Axios response:", response.status, response.config.url);
    return response;
  },
  (error) => {
    console.error("‚ùå Axios response error:", error?.response?.status, error?.response?.config?.url);

    // Khi g·∫∑p 401: ch·ªâ remove token v√† ph√°t event; kh√¥ng redirect tr·ª±c ti·∫øp.
    if (error.response?.status === 401) {
      try {
        console.log("üîÑ Axios detected 401 ‚Äî removing token and dispatching app:unauthorized");
        localStorage.removeItem("token");
        window.dispatchEvent(new CustomEvent("app:unauthorized", { detail: { url: error?.config?.url } }));
      } catch (e) {
        console.warn("Could not dispatch unauthorized event:", e);
      }
    }

    return Promise.reject(error);
  }
);

export default instance;

