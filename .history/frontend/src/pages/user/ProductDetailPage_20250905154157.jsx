import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import api from "../../services/axios";
import Reviews from "../../components/user/Reviews";
import Payment from "../../components/user/Payment";
import "../../assets/style/product-detail.css";

const ProductDetailPage = () => {
  const { id } = useParams();

  const [product, setProduct] = useState(null);
  const [selectedVariant, setSelectedVariant] = useState(null);
  const [attributes, setAttributes] = useState({});
  const [mainImage, setMainImage] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [showPayment, setShowPayment] = useState(false);

  // =====================
  // Fetch product detail
  // =====================
  useEffect(() => {
    console.log("üîÑ useEffect -> fetchProduct, id =", id);
    fetchProduct();
  }, [id]);

  const fetchProduct = async () => {
    setLoading(true);
    try {
      console.log("üì° Fetching product:", id);
      const { data } = await api.get(`/user/products/${id}`);
      console.log("‚úÖ Product loaded:", data.product);

      setProduct(data.product);

      // ·∫¢nh ch√≠nh m·∫∑c ƒë·ªãnh
      if (data.product.images?.length > 0) {
        setMainImage(data.product.images[0]);
      }

      // Bi·∫øn th·ªÉ m·∫∑c ƒë·ªãnh
      if (data.product.variants?.length > 0) {
        const def = data.product.variants.find((v) => v.isDefault);
        setSelectedVariant(def || data.product.variants[0]);
      }
    } catch (err) {
      setError("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m");
      console.error("‚ùå Fetch product error:", err);
    } finally {
      setLoading(false);
    }
  };

  // =====================
  // Ch·ªçn bi·∫øn th·ªÉ
  // =====================
  const handleAttributeChange = async (name, value) => {
    console.log("üé® Ch·ªçn bi·∫øn th·ªÉ:", name, "=", value);
    const newAttrs = { ...attributes, [name]: value };
    setAttributes(newAttrs);

    try {
      const { data } = await api.post(`/user/products/${id}/check-variant`, {
        attributes: newAttrs,
      });
      console.log("üîç K·∫øt qu·∫£ check-variant:", data);
      setSelectedVariant(data.found ? data.variant : null);
    } catch (err) {
      console.error("‚ùå Error checking variant:", err);
    }
  };

  // =====================
  // Th√™m v√†o gi·ªè h√†ng
  // =====================
  const handleAddToCart = async () => {
    if (!selectedVariant?._id || !selectedVariant?.stock) {
      console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m gi·ªè h√†ng, variant =", selectedVariant);
      return;
    }
    try {
      console.log("‚ûï Th√™m v√†o gi·ªè:", {
        product: id,
        variant: selectedVariant._id,
        quantity: 1,
      });
      await api.post("/user/cart", {
        product: id,
        variant: selectedVariant._id,
        quantity: 1,
      });
      alert("‚úÖ ƒê√£ th√™m v√†o gi·ªè h√†ng");
    } catch (err) {
      console.error("‚ùå Add to cart error:", err.response?.data || err.message);
      alert(err.response?.data?.message || "‚ùå L·ªói th√™m v√†o gi·ªè h√†ng");
    }
  };

  // =====================
  // Mua ngay
  // =====================
  const handleBuyNow = () => {
    console.log("üõí Click Mua ngay");
    if (!selectedVariant?._id || !selectedVariant?.stock) {
      console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ mua ngay, variant =", selectedVariant);
      return;
    }
    console.log("‚úÖ M·ªü Payment modal v·ªõi:", {
      product: id,
      variant: selectedVariant._id,
      quantity: 1,
    });
    setShowPayment(true); // ‚úÖ m·ªü modal Payment
  };

  // =====================
  // UI Render
  // =====================
  if (loading) return <p>ƒêang t·∫£i...</p>;
  if (error) return <p>{error}</p>;
  if (!product) return null;

  const inStock = selectedVariant
    ? selectedVariant.stock > 0
    : product.stock > 0;

  const priceDisplay =
    selectedVariant?.price?.toLocaleString("vi-VN") ||
    product.price?.toLocaleString("vi-VN");

  return (
    <div className="product-detail-page container">
      <div className="product-detail-grid">
        {/* C·ªôt tr√°i: gallery ·∫£nh */}
        <div className="product-images">
          <img src={mainImage} alt={product.name} className="main-image" />
          <div className="thumbnails">
            {product.images?.map((img, idx) => (
              <img
                key={idx}
                src={img}
                alt={`${product.name}-${idx}`}
                className={`thumb ${mainImage === img ? "active" : ""}`}
                onClick={() => {
                  console.log("üñºÔ∏è ƒê·ªïi ·∫£nh ch√≠nh:", img);
                  setMainImage(img);
                }}
              />
            ))}
          </div>
        </div>

        {/* C·ªôt ph·∫£i: th√¥ng tin s·∫£n ph·∫©m */}
        <div className="product-info">
          <h1 className="product-title">{product.name}</h1>

          <div className="meta">
            <span>ƒê√£ b√°n: {product.sold ?? 0}</span>
            <span>‚Ä¢</span>
            <span>ƒê√°nh gi√°: {product.avgRating?.toFixed(1) || 0}/5</span>
          </div>

          <div className="price">{priceDisplay} ‚Ç´</div>

          <div className="status">
            Tr·∫°ng th√°i:{" "}
            {inStock ? (
              <span className="text-success">C√≤n h√†ng</span>
            ) : (
              <span className="text-danger">H·∫øt h√†ng</span>
            )}
          </div>

          {/* Actions */}
          <div className="actions">
            {inStock ? (
              <>
                <button
                  type="button"
                  className="btn btn-danger"
                  onClick={handleBuyNow}
                >
                  Mua ngay / Tr·∫£ g√≥p
                </button>
                <button
                  className="btn btn-outline-primary"
                  onClick={handleAddToCart}
                >
                  Th√™m v√†o gi·ªè h√†ng
                </button>
              </>
            ) : (
              <button className="btn btn-secondary" disabled>
                H·∫øt h√†ng
              </button>
            )}
          </div>
        </div>
      </div>

      {/* M√¥ t·∫£ s·∫£n ph·∫©m */}
      <div className="product-description">
        <h2>M√¥ t·∫£ s·∫£n ph·∫©m</h2>
        <p>{product.description || "Ch∆∞a c√≥ m√¥ t·∫£"}</p>
      </div>

      {/* Reviews */}
      <div className="product-reviews">
        <Reviews productId={id} />
      </div>

      {/* Payment modal */}
      {showPayment && (
        <div className="payment-overlay">
          <div className="payment-modal">
            <Payment
              product={id}
              variant={selectedVariant._id}
              quantity={1}
              onClose={() => {
                console.log("‚ùé ƒê√≥ng Payment modal");
                setShowPayment(false);
              }}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductDetailPage;
