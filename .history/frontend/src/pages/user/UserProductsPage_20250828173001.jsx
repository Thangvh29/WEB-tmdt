// frontend/src/pages/user/UserProductsPage.jsx import React, { useState, useEffect } from 'react'; import api from '../../services/axios'; import ProductCard from '../../components/user/ProductCard'; import Filters from '../../components/user/Filters'; import '../../assets/style/user-products.css'; const UserProductsPage = () => { const [products, setProducts] = useState([]); const [categories, setCategories] = useState([]); const [filters, setFilters] = useState({ q: '', isNew: undefined, brand: '', type: '', category: '', minPrice: '', maxPrice: '', sort: 'newest', page: 1, limit: 12, }); const [total, setTotal] = useState(0); const [loading, setLoading] = useState(false); useEffect(() => { fetchCategories(); }, []); useEffect(() => { fetchProducts(); }, [filters]); // Lấy danh mục const fetchCategories = async () => { try { const { data } = await api.get('/user/categories'); setCategories(data.categories || []); } catch (err) { console.error('Error fetching categories:', err); } }; // Lấy sản phẩm const fetchProducts = async () => { setLoading(true); try { const params = {}; if (filters.q) params.q = filters.q; if (filters.brand) params.brand = filters.brand; if (filters.type) params.type = filters.type; if (filters.category) params.category = filters.category; if (filters.minPrice) params.minPrice = filters.minPrice; if (filters.maxPrice) params.maxPrice = filters.maxPrice; if (filters.isNew !== undefined) params.isNew = filters.isNew ? 'true' : 'false'; if (filters.sort) params.sort = filters.sort; params.page = filters.page; params.limit = filters.limit; const { data } = await api.get('/user/products', { params }); setProducts(data.products || []); setTotal(data.total || 0); } catch (err) { console.error('Error fetching products:', err); } finally { setLoading(false); } }; const handleFilterChange = (newFilters) => { setFilters({ ...filters, ...newFilters, page: 1 }); }; const handlePageChange = (newPage) => { setFilters({ ...filters, page: newPage }); }; return ( <div className="user-products-page"> <h1>Sản phẩm</h1> <Filters filters={filters} categories={categories} onFilterChange={handleFilterChange} /> {loading ? ( <p>Đang tải...</p> ) : ( <div className="products-grid"> {products.length > 0 ? ( products.map((product) => ( <ProductCard key={product._id} product={product} /> )) ) : ( <p>Không có sản phẩm nào.</p> )} </div> )} {/* Pagination */} <div className="pagination"> {Array.from({ length: Math.ceil(total / filters.limit) }, (_, i) => ( <button key={i} onClick={() => handlePageChange(i + 1)} className={filters.page === i + 1 ? 'active' : ''} > {i + 1} </button> ))} </div> </div> ); }; export default UserProductsPage;