import type { RequestHandler } from 'express';
import jwt from 'jsonwebtoken';
import { User } from '../models/user.model.js';
import type { AuthRequest } from './types.js';
import config from '../config/config.js';

export const protect: RequestHandler = async (req: AuthRequest, res, next) => {
  try {
    let token: string | undefined;

    // ∆Øu ti√™n l·∫•y t·ª´ header
    if (req.headers.authorization && req.headers.authorization.startsWith("Bearer ")) {
      token = req.headers.authorization.split(" ")[1];
    }

    // N·∫øu kh√¥ng c√≥ header th√¨ fallback sang cookie (n·∫øu b·∫°n v·∫´n mu·ªën h·ªó tr·ª£ cookie login)
    if (!token && req.cookies?.token) {
      token = req.cookies.token;
    }

    console.log("üîë Protect middleware - Authorization header:", req.headers.authorization);
    console.log("üîë Protect middleware - token:", token);

    if (!token) {
      return res.status(401).json({ message: "Kh√¥ng c√≥ token, quy·ªÅn truy c·∫≠p b·ªã t·ª´ ch·ªëi" });
    }

    // X√°c th·ª±c token
    const decoded = jwt.verify(token, config.JWT_SECRET) as { userId: string; role: string };
    console.log("‚úÖ Protect middleware - decoded:", decoded);

    // N·∫øu l√† route user th√¨ l·∫•y th√¥ng tin user
    const isUserRoute = req.originalUrl.startsWith("/api/user/");
    if (isUserRoute) {
      const user = await User.findById(decoded.userId).select("-password -passwordResetToken -passwordResetExpires");
      if (!user) {
        console.log("‚ùå Protect middleware - User not found for ID:", decoded.userId);
        return res.status(401).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
      }
      req.user = user;
    } else {
      // Admin v√† c√°c route kh√°c
      req.user = { _id: decoded.userId, role: decoded.role };
    }

    console.log("‚úÖ Protect middleware - req.user:", req.user);
    next();
  } catch (error) {
    console.error("‚ùå Protect middleware - error:", error);
    res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
  }
};
